{"version":3,"sources":["components/Nav.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","score","topScore","message","Card","country","alt","name","src","img","onClick","clickedCard","id","App","state","sportlogos","title","clicked","console","log","indexOf","newClicked","push","newscore","setState","shuffle","sort","Math","random","this","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y5CAeeA,EAbH,SAAAC,GACR,OACI,6BACI,yBAAKC,UAAU,aACf,wBAAIA,UAAU,SAAd,oBACI,wBAAIA,UAAW,UAAf,UAAgCD,EAAME,MAAtC,iBAA2DF,EAAMG,UACjE,wBAAIF,UAAU,WAAWD,EAAMI,Y,OCShCC,G,KAdF,SAAAL,GACT,OACI,yBAAKC,UAAU,2BACX,4BAAKD,EAAMM,SACX,yBACIC,IAAKP,EAAMQ,KACXC,IAAKT,EAAMU,IACXC,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMa,KACvCZ,UAAU,cCkEXa,E,2MArEbC,MAAQ,CACNC,aACAC,MAAO,yBACPf,MAAO,EACPC,SAAU,EACVC,QAAS,6EACTc,QAAS,I,EAOXN,YAAc,SAACC,GAEb,GADAM,QAAQC,IAAI,EAAKL,QACuB,IAApC,EAAKA,MAAMG,QAAQG,QAAQR,GAAY,CACzC,IAAIS,EAAa,EAAKP,MAAMG,QAC5BI,EAAWC,KAAKV,GAChB,IAAIW,EAAW,EAAKT,MAAMb,MAAQ,EAAI,EAAKa,MAAMZ,SAAW,EAAKY,MAAMb,MAAQ,EAAI,EAAKa,MAAMZ,SAC9F,EAAKsB,SAAS,CACZT,WAAY,EAAKU,QAAQ,EAAKX,MAAMC,YACpCd,MAAO,EAAKa,MAAMb,MAAQ,EAC1BC,SAAUqB,EACVpB,QAAS,qDACTc,QAASI,SAKX,EAAKG,SAAS,CACZT,WAAY,EAAKU,QAAQ,EAAKX,MAAMC,YACpCd,MAAO,EACPE,QAAS,kDACTc,QAAS,M,EAKfQ,QAAU,SAAAV,GAKR,OAFoBA,EAAWW,MAAK,kBAClCC,KAAKC,SAAW,O,mFAhClBC,KAAKL,SAAS,CAAET,WAAYc,KAAKJ,QAAQI,KAAKf,MAAMC,gB,+BAoC5C,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEZ,QAAS0B,KAAKf,MAAMX,QACpBF,MAAO4B,KAAKf,MAAMb,MAClBC,SAAU2B,KAAKf,MAAMZ,WAEvB,yBAAKF,UAAU,wBACZ6B,KAAKf,MAAMC,WAAWe,KAAI,SAAAC,GAAI,OAC7B,kBAAC,EAAD,CACEhB,WAAYgB,EAAKhB,WACjBH,GAAImB,EAAKnB,GACTH,IAAKsB,EAAKtB,IACVE,YAAa,EAAKA,uB,GA9DdqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e548a3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = props => {\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n            <h1 className=\"title\">Sport Logos Game</h1>\r\n                <h3 className= \"scores\">Score: {props.score} | Top Score: {props.topScore}</h3>\r\n                <h3 className=\"message\">{props.message}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"sportlogos-subcontainer\">\r\n            <h3>{props.country}</h3>\r\n            <img\r\n                alt={props.name}\r\n                src={props.img}\r\n                onClick={() => props.clickedCard(props.id)}\r\n                className=\"images\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n              \r\nexport default Card;","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport sportlogos from \"./sportlogos.json\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    sportlogos,\n    title: \"Sport Logo Memory Game\",\n    score: 0,\n    topScore: 0,\n    message: \"Click an any Sport Logo to start but don't click on it any more than once!\",\n    clicked: []\n  }\n\n  componentDidMount() {\n    this.setState({ sportlogos: this.shuffle(this.state.sportlogos) })\n  }\n\n  clickedCard = (id) => {\n    console.log(this.state)\n    if (this.state.clicked.indexOf(id) === -1) {\n      let newClicked = this.state.clicked\n      newClicked.push(id)\n      let newscore = this.state.score + 1 > this.state.topScore ? this.state.score + 1 : this.state.topScore\n      this.setState({\n        sportlogos: this.shuffle(this.state.sportlogos),\n        score: this.state.score + 1,\n        topScore: newscore,\n        message: \"Keep going! You're on your way to a new top score!\",\n        clicked: newClicked\n      })\n\n    }\n    else {\n      this.setState({\n        sportlogos: this.shuffle(this.state.sportlogos),\n        score: 0,\n        message: \"Oh no! You clicked a Sport logo more than once!\",\n        clicked: [],\n      });\n    }\n  }\n\n  shuffle = sportlogos => {\n    // https://stackoverflow.com/a/43235780/10503606\n\n    let newsportlogos = sportlogos.sort(() =>\n      Math.random() - 0.5);\n    return newsportlogos;\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"sportlogos-container\">\n          {this.state.sportlogos.map(item => (\n            <Card\n              sportlogos={item.sportlogos}\n              id={item.id}\n              img={item.img}\n              clickedCard={this.clickedCard}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}